# load 20newsgroups datset into an array
from sklearn.datasets import fetch_20newsgroups
remove = ('headers', 'footers', 'quotes')
newsgroups_train = fetch_20newsgroups(subset='train', remove=remove)
newsgroups_test = fetch_20newsgroups(subset='test', remove=remove)
docs = newsgroups_train.data +  newsgroups_test.data

import ktrain
from ktrain.text.qa import SimpleQA

STEP 1: Index the Documents
We will first index the documents into a search engine that will be used to quickly retrieve documents that are likely to contain answers to a question. To do so, we must choose an index location, which must be a folder that does not already exist.

INDEXDIR = '/tmp/myindex'
SimpleQA.initialize_index(INDEXDIR)
SimpleQA.index_from_list(docs, INDEXDIR, commit_every=len(docs),
                         multisegment=True, procs=4, # these args speed up indexing
                         breakup_docs=True         # this slows indexing but speeds up answer retrieval
                         )
                         
STEP 2: Create a QA instance
Next, we create a QA instance. This step will automatically download the BERT SQuAD model if it does not already exist on your system.

qa = SimpleQA(INDEXDIR)

STEP 3: Ask Questions
We will invoke the ask method to issue questions to the text corpus we indexed and retrieve answers. We will also use the qa.display method to nicely display the top 5 results in this Jupyter notebook. The answers are inferred using a BERT model fine-tuned on the SQuAD dataset. 

answers = qa.ask('When did the Cassini probe launch?')
qa.display_answers(answers[:5])

STEP 4: Connecting the QA System to an Existing Search Engine
In this notebook, we created and populated our own search index of documents. As mentioned above, ktrain uses whoosh internally for this. It is relatively easy to use the ktrain qa module with an existing, pre-populated search engine like Apache Solr or Elastic Search. You can simply subclass the QA class and override the search method:

from ktrain.text.qa import QA
class MyCustomQA(QA):
    """
   Custom QA Module
    """
    def __init__(self,
                 bert_squad_model='bert-large-uncased-whole-word-masking-finetuned-squad',
                 bert_emb_model='bert-base-uncased'):
        """
        MyCustomQA constructor.  Include other parameters as needed.
        Args:
          bert_squad_model(str): name of BERT SQUAD model to use
          bert_emb_model(str): BERT model to use to generate embeddings for semantic similarity

        """
        super().__init__(bert_squad_model=bert_squad_model, bert_emb_model=bert_emb_model)


    def search(self, query, limit=10, min_context_length=50):
        """
        search index for query
        Args:
          query(str): search query
          limit(int):  number of top search results to return
        Returns:
          list of dicts with keys: reference, rawtext
        """

        # ADD CODE HERE TO QUERY YOUR SEARCH ENGINE
        # The query is the text of the question being asked.
        # This code will find documents that match words in question.
If the back-end search engine is already populated with documents, you can now simply instantiate a QA object and invoke ask normally:

qa = MyCustomQA()
qa.ask('What is the best search engine?')