# Import required libraries

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt

#Load customers data
customersdata = pd.read_csv("customers-data.csv")
# Define K-means model
kmeans_model = KMeans(init='k-means++',  max_iter=400, random_state=42)

# Train the model
kmeans_model.fit(customersdata[['Column1','Column2', 'Column3']])

# Create the K means model for different values of K
def try_different_clusters(K, data):
       
    cluster_values = list(range(1, K+1))
    inertias=[]
    
    for c in cluster_values:
        model = KMeans(n_clusters = c,init='k-means++',max_iter=400,random_state=42)
        model.fit(data)
        inertias.append(model.inertia_)
    
    return inertias

# Find output for k values between 1 to 12 
outputs = try_different_clusters(12, customersdata[['Column1','Column2','Column3']])
distances = pd.DataFrame({"clusters": list(range(1, 13)),"sum of squared distances": outputs})

# Finding optimal number of clusters k (Elbow Plot)
figure = go.Figure()
figure.add_trace(go.Scatter(x=distances["clusters"], y=distances["sum of squared distances"]))

figure.update_layout(xaxis = dict(tick0 = 1,dtick = 1,tickmode = 'linear'),                  
                  xaxis_title="Number of clusters",
                  yaxis_title="Sum of squared distances",
                  title_text="Finding optimal number of clusters using elbow method")
figure.show()

# Re-Train K means model with k=5
kmeans_model_new = KMeans(n_clusters = 5,init='k-means++',max_iter=400,random_state=42)

kmeans_model_new.fit_predict(customersdata[['Column1','Column2','Column3']])

### Visualize Customer Segments ####
# Create data arrays
cluster_centers = kmeans_model_new.cluster_centers_
data = np.expm1(cluster_centers)
points = np.append(data, cluster_centers, axis=1)
points

# Add "clusters" to customers data
points = np.append(points, [[0], [1], [2], [3], [4]], axis=1)
customersdata["clusters"] = kmeans_model_new.labels_

# visualize clusters using plotly
figure = px.scatter_3d(customersdata,
                    color='clusters',
                    x="Column1",
                    y="Column2",
                    z="Column3",            
                    category_orders = {"clusters": ["0", "1", "2", "3", "4"]}                    
                    )
figure.update_layout()
figure.show()
